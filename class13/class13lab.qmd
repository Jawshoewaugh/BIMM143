---
title: "Class 13 - Transcriptomics and the analysis of RNA-Seq data"
author: "Joshua Mac"
format: pdf
date: Feb 24, 2024
---
**Bioconductor setup**

We'll be using Bioconductor in this lab so:
```{r}
# in console - install.packages("BiocManager")
# in console - BiocManager::install()
```

```{r}
# For this class we will need DESeq2:
# in console - BiocManager::install("DESeq2")
```

To check install and enable these packages:
```{r}
library(BiocManager)
library(DESeq2)
```

**Import countData and colData**

After downloading and moving the csvs to project directory:
```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

Data heads:
```{r}
heads(counts)
```

```{r}
heads(metadata)
```

**Q1. How many genes are in this dataset?**

> A1. There are 38694 genes in the dataset.

```{r}
nrow(counts)
```

**Q2. How many ‘control’ cell lines do we have?**

> A2. There are 4 control cell lines.

```{r}
View(metadata)
# Counted 4 control cell lines.
```

**Toy differential gene expression**

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

Alternative to above use dplyr (preferred):

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

**Q3. How would you make the above code in either approach more robust? Is there a function that could help here?**

> A3. Yes, use rowMeans() in place of rowSums(x)/#

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowMeans(control.counts)
head(control.mean)
```

**Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)**

> A4. See code below.

```{r}
library(dplyr)
treated <- metadata %>% filter(dex=="treated")
treated.counts <- counts %>% select(treated$id) 
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

Combining the two means:
```{r}
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
```

**Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.**

> A5 (a). See code and result below.

Scatterplot:
```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")
```

**Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?**

> A5 (b). geom_point

```{r}
# Install/update - install.packages(ggplot2)
library(ggplot2)
ggplot(meancounts, aes(control.mean, treated.mean))+
  geom_point(alpha=0.5)
```

**Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?**

> A6. The argument to plot() is `log="xy"`.

```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated", log ="xy")
```

For ggplot() it's scale_x_continuous(trans="log2") and scale_y_continuous(trans="log2")
```{r}
ggplot(meancounts, aes(control.mean, treated.mean))+
  geom_point(alpha=0.5)+
  scale_x_continuous(trans="log2")+
  scale_y_continuous(trans="log2")
```

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

Now our data has been filtered >:)

**Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?**

> A7. arr.ind functions in the which() function call to return the indices (row & column) with true values with the previous ==0, so row indices and column indices that have zero values. Then taking the first column instead of both so we can count a row twice in case there were any with zero values in both control.mean and treated.mean columns

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

**Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?**

> A8. Yes, we can by counting how many TRUE values from it using sum, as FALSE is 0 and TRUE is 1.

```{r}
sum(up.ind)
```

**Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?**

> A9. Yes, same logic.

```{r}
sum(down.ind)
```

**Q10. Do you trust these results? Why or why not?**

> A10. Not quite, log2FoldChange seems rather arbitrary as a definition of up-/down- regulation, especially only by 2. But if it's a common threshold, maybe it's not so bad?

**Setting up for DESeq**

```{r}
library(DESeq2)
citation("DESeq2")
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

**Principal Component Analysis (PCA)**

Our old friend...

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

This was made possible by the DESeq package.
Now for ggplot2.

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```
Clearly more code to write...

**DESeq analysis**

```{r}
# results(dds) pulls an error
dds <- DESeq(dds)
```
```{r}
# To get results
res <- results(dds)
res
```
```{r}
# as.data.frame(res)
# View(res)
```

```{r}
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

**Adding annotation data**

```{r}
# Install and enable:
# BiocManager::install("AnnotationDbi")
# BiocManager::install("org.Hs.eg.db")
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

**Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.**

> A11. See code below.

For Entrez ID
```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID", # New format
                     keytype="ENSEMBL",
                     multiVals="first")
```

For Uniprot accession
```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT", # New format
                     keytype="ENSEMBL",
                     multiVals="first")
```

For gene name
```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME", # New format
                     keytype="ENSEMBL",
                     multiVals="first")
```

```{r}
head(res)
```

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
# Woah we just wrote our own csv :0
```

**Data Visualization**

*Volcano Plots*

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
# in console - BiocManager::install("EnhancedVolcano")
```

```{r}
library(EnhancedVolcano)
```

```{r}
x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

