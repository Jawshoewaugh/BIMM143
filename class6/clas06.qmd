---
title: "Class 6 R Functions"
author: "Joshua Mac A17016359"
format: pdf
date: January 27, 2025
---

>Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Following the steps from class:
Simple problem Step 1
```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)

mean(student1)
```
Drop the lowest score
```{r}
which.min(student1)
student1[-8]
```

```{r}
## First working snippet
mean(student1[-which.min(student1)])
```
What about the other students in the class?
```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
mean(student2, na.rm=T)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
mean(student3, na.rm=T)

```
Do these make sense?
No, because student 3 did only 1 homework and got an average hw grade of 90

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
x<-student2
is.na(x)
which(is.na(x))
```
Identified NA elements, now want to mask the NA, replacing them with 0s and dropping the lowest
```{r}
x[(is.na(x))]<-0
x
mean(x)
mean(x[-which.min(x)])
```
Now for student 3, a more extreme case
```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
y<-student3
y[is.na(y)]<-0
mean(y[-which.min(y)])
```

##Step 2: Function making time for grade()!
3 Parts to a Function:
- Name: name
- Input: arguments
- Body: working snippet

```{r}
grade <- function(x) {
  x[is.na(x)]<-0
  mean(x[-which.min(x)])
}
```
Now we have a function we can run!

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Let's annotate the function
```{r}
#' Calculate average score for vector of students, dropping the lowest.
#'Missing values will be treated as zero
#' @param x A numeric vector of HW scores
#'
#' @returns Average score
#' @export
#'
#' @examples
#' student<-c(100, 90, 50, 80)
#' grade(student)
#'
grade <- function(x) {
  #Mask NA with zero
  #Treat missing as zero
  x[is.na(x)]<-0
  #Exclude the lowest score from mean
  mean(x[-which.min(x)])
}
```
Now, to a larger "gradebook"
CSV format: “https://tinyurl.com/gradeinput” 

```{r}
url<- "https://tinyurl.com/gradeinput"
gradebook<-read.csv(url, row.names = 1 )
```

```{r}
#Applying to data with margin a function
apply(gradebook, 1, grade)
```
>Q2.Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? 

Apply function, see result using code not eyeballs
```{r}
results<-apply(gradebook, 1, grade)
sort(results,decreasing=T)
which.max(results)
```
So the answer is student 18!

>Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?

```{r}
gradebook
ave.scores<- apply(gradebook, 2, mean, na.rm=T)
ave.scores
which.min(ave.scores)
median.scores<-apply(gradebook, 2, median, na.rm=T)
median.scores
which.min(median.scores)
```
So homework 3 was, on average, the most challenging for students, while hw 2 had the lowest median score with just a tiny bit higher average score.
```{r}
boxplot(gradebook)
```
Looking at the boxplot of the gradebook, **hw2** (even though average for hw3 was smaller) was the most challenging for students overall.

>Q5. Make sure you save your Quarto document and can click the “Render” (or Rmarkdown”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF
to gradescope. 
