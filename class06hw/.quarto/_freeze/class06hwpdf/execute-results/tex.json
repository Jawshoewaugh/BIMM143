{
  "hash": "873948adb52c7be8bc8018788b17fd71",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class 06 HW\"\nauthor: \"Joshua Mac\"\nformat: pdf\ndate: January 27, 2025\n---\n\n\nAnalysis code for drug interactions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Can you improve this analysis code?\nlibrary(bio3d)\ns1 <- read.pdb(\"4AKE\") # kinase with drug\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Note: Accessing on-line PDB file\n```\n\n\n:::\n\n```{.r .cell-code}\ns2 <- read.pdb(\"1AKE\") # kinase no drug\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Note: Accessing on-line PDB file\n   PDB has ALT records, taking A only, rm.alt=TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ns3 <- read.pdb(\"1E4Y\") # kinase with drug\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Note: Accessing on-line PDB file\n```\n\n\n:::\n\n```{.r .cell-code}\ns1.chainA <- trim.pdb(s1, chain=\"A\", elety=\"CA\")\ns2.chainA <- trim.pdb(s2, chain=\"A\", elety=\"CA\")\ns3.chainA <- trim.pdb(s1, chain=\"A\", elety=\"CA\")\ns1.b <- s1.chainA$atom$b\ns2.b <- s2.chainA$atom$b\ns3.b <- s3.chainA$atom$b\nplotb3(s1.b, sse=s1.chainA, typ=\"l\", ylab=\"Bfactor\")\n```\n\n::: {.cell-output-display}\n![](class06hwpdf_files/figure-pdf/unnamed-chunk-1-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplotb3(s2.b, sse=s2.chainA, typ=\"l\", ylab=\"Bfactor\")\n```\n\n::: {.cell-output-display}\n![](class06hwpdf_files/figure-pdf/unnamed-chunk-1-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplotb3(s3.b, sse=s3.chainA, typ=\"l\", ylab=\"Bfactor\")\n```\n\n::: {.cell-output-display}\n![](class06hwpdf_files/figure-pdf/unnamed-chunk-1-3.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n>Q6. How would you generalize the original code above to work with any set of input\nprotein structures?\n\n`libary(bio3d)` is already on\n\nRemember, function has name, input, and body in this structure:\n\nfunction_name<-function(input){function_body}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#I will coin you: \"protein_analysis\", with \"protein\"\n#as a holder of a pdb\n\nprotein_analysis<-function(protein, chain=\"A\", elety=\"CA\"){\n  #Everything from now on will be part of the function\n  #First, we need to read the inputted pdb\n  p<-read.pdb(protein)\n  #Next, trim the pdb to extract chain A data and alpha-carbon CA atoms only\n  p.chainA<-trim.pdb(p, chain=\"A\",elety=\"CA\")\n  #Next, extract the Bfactors, which is the atom column and the b column\n  p.bfactors<-p.chainA$atom$b\n  #Finally, plot like in the original code\n  plotb3(p.bfactors,sse=p.chainA,typ=\"l\", ylab=\"Bfactor\")\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#now i will try and call/execute\nprotein_analysis(\"1AKE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Note: Accessing on-line PDB file\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in get.pdb(file, path = tempdir(), verbose = FALSE):\n/var/folders/l3/0w1v1h157qj81sz_k6f27glm0000gn/T//RtmppdXqhu/1AKE.pdb exists.\nSkipping download\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   PDB has ALT records, taking A only, rm.alt=TRUE\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class06hwpdf_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nEssentially, the function works by taking a pdb input, reading it, trimming it to create a new pdb that has only the chain information and keeps the chain element type, extracts the bfactors, and plots it.\n\nThe output is a plot that visualizes Bfactor x Residue !\n\nFor example, above, I called the function protein_analysis on the pdb \"1AKE\" and it plot its Bfactor x Residue relationship for me in a line type bio3d plot.\n\n",
    "supporting": [
      "class06hwpdf_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}